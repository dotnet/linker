<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="$(MSBuildThisFileDirectory)../../eng/Versions.props" Condition=" '$(ArcadeBuild)' != 'true' " />
  <PropertyGroup>
    <TargetFrameworks>netcoreapp2.0;net472</TargetFrameworks>
    <TargetFrameworks Condition=" '$(OS)' != 'Windows_NT' ">netcoreapp2.0</TargetFrameworks>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <BaseOutputPath>bin/</BaseOutputPath>
    <PackageOutputPath>$(BaseOutputPath)nupkgs</PackageOutputPath>
    <IsPackable>true</IsPackable>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Description>MSBuild tasks for running the IL Linker</Description>
    <Authors>$(AssemblyName)</Authors>
    <!-- Don't include the build output. Instead, we want to include
         the TargetFramework-specific publish output. -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <!-- We want to package the tasks package together with its
         transitive dependencies and the linker, without marking them
         as dependencies in the tasks package.

         Pack doesn't support including project references
         (https://github.com/NuGet/Home/issues/3891), so we work
         around this by explicitly including the publish output in the
         package. -->
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_LayoutPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="LinkTask.cs" />
    <Compile Include="CheckEmbeddedRootDescriptor.cs" />
    <Compile Include="CompareSizes.cs" />
    <Compile Include="ComputeManagedAssemblies.cs" />
    <Compile Include="ComputeRemovedAssemblies.cs" />
    <Compile Include="CreateRootDescriptorFile.cs" />
    <Compile Include="CreateRuntimeRootDescriptorFile.cs" />
    <Compile Include="FilterByMetadata.cs" />
    <Compile Include="FindDuplicatesByMetadata.cs" />
    <Compile Include="FindNativeDeps.cs" />
    <Compile Include="SetAssemblyActions.cs" />
    <Compile Include="Utils.cs" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="ILLink.Tasks.targets">
      <PackagePath>build</PackagePath>
    </Content>
    <Content Include="Sdk/Sdk.props">
      <PackagePath>Sdk</PackagePath>
    </Content>
  </ItemGroup>

  <Target Name="_LayoutPackage">

    <PropertyGroup>
      <PublishDir>$(BaseOutputPath)$(TargetFramework)</PublishDir>
    </PropertyGroup>

    <ItemGroup>
      <ProjectsToPublish Include="$(MSBuildProjectFile)">
        <AdditionalProperties>TargetFramework=$(TargetFramework);PublishDir=$(PublishDir)</AdditionalProperties>
      </ProjectsToPublish>
    </ItemGroup>

    <!-- Clean the publish directory in case there are any left-over
         artifacts (publish does not work incrementally). -->
    <ItemGroup>
      <_FilesToDelete Remove="@(_FilesToDelete)" />
      <_FilesToDelete Include="$(PublishDir)/*.dll" />
      <_FilesToDelete Include="$(PublishDir)/*.json" />
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)" />

    <MSBuild Projects="@(ProjectsToPublish)" Targets="Publish" />
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(PublishDir)/*.dll" PackagePath="tools\$(TargetFramework)" />
      <TfmSpecificPackageFile Include="$(PublishDir)/*.json" PackagePath="tools\$(TargetFramework)" />
    </ItemGroup>

  </Target>

  <ItemGroup>
    <ProjectReference Include="../linker/Mono.Linker.csproj"
                      PrivateAssets="All"
                      Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">
      <!-- SetConfiguration isn't required when the configuration is
           already set in the solution. Setting it here allows packing
           the tasks csproj on its own. This lets us avoid some of the
           strange behavior that shows up when trying to build from a
           .sln file.

           There is a nuget bug that prevents this from working
           properly during restore
           (https://github.com/NuGet/Home/issues/4873). For the
           moment, the linker has a workaround for this issue.

           However, this still won't work properly because the build
           target doesn't propagate this information properly either -
           this is probably another bug. Building from the .csproj
           would cause cecil to be built twice, once through the
           linker with the netstandard configuration and once directly
           from the tasks project in the default configuration info
           (because some target gets its reference information from
           the lock file, which doesn't have configuration info).
      -->
      <SetConfiguration>Configuration=illink_$(Configuration)</SetConfiguration>
    </ProjectReference>
    <ProjectReference Include="../../external/cecil/Mono.Cecil.csproj"
                      PrivateAssets="All" />

    <ProjectReference Include="../ILLink.CustomSteps/ILLink.CustomSteps.csproj"
                      PrivateAssets="All"
                      Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">
      <SetConfiguration>Configuration=illink_$(Configuration)</SetConfiguration>
    </ProjectReference>
  </ItemGroup>

  <!-- Workaround for the SetConfiguration issue described above. -->
  <Target Name="SetCecilConfiguration"
          AfterTargets="AssignProjectConfiguration">
    <ItemGroup>
      <ProjectReferenceWithConfiguration Condition=" '%(Filename)%(Extension)' == 'Mono.Cecil.csproj' Or '%(Filename)%(Extension)' == 'Mono.Cecil.Pdb.csproj' Or '%(Filename)%(Extension)' == 'Mono.Cecil.Mdb.csproj' ">
        <SetConfiguration Condition=" '$(TargetFramework)' == 'net46' ">Configuration=net_4_0_$(Configuration)</SetConfiguration>
        <SetConfiguration Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">Configuration=netstandard_$(Configuration)</SetConfiguration>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>
  </Target>

  <ItemGroup>

    <!-- We use private assets for the Microsoft.Build packages to
         prevent them from being published with the tasks dll, because
         these are already a part of the SDK. -->
    <PackageReference Include="Microsoft.Build.Framework" Version="$(MicrosoftBuildFrameworkVersion)"
                      PrivateAssets="All"
                      ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="$(MicrosoftBuildUtilitiesCoreVersion)"
                      PrivateAssets="All"
                      ExcludeAssets="Runtime" />
    <PackageReference Include="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)"
                      Condition=" '$(TargetFramework)' == 'net472' "
                      PrivateAssets="All"
                      Publish="True" />
  </ItemGroup>
</Project>
